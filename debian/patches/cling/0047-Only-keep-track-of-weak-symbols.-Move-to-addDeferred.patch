From a9d0f5d06d822010051c97c8f35c6bccf7e3c956 Mon Sep 17 00:00:00 2001
From: Axel Naumann <Axel.Naumann@cern.ch>
Date: Wed, 29 Mar 2017 17:21:21 +0200
Subject: [PATCH 47/57] Only keep track of weak symbols. Move to
 addDeferredDeclToEmit.

---
 clang/lib/CodeGen/CodeGenModule.cpp | 25 +++++++++++--------------
 clang/lib/CodeGen/CodeGenModule.h   | 19 ++++++++++++++++---
 2 files changed, 27 insertions(+), 17 deletions(-)

diff --git a/clang/lib/CodeGen/CodeGenModule.cpp b/clang/lib/CodeGen/CodeGenModule.cpp
index f90e8933982e..956c875f6760 100644
--- a/clang/lib/CodeGen/CodeGenModule.cpp
+++ b/clang/lib/CodeGen/CodeGenModule.cpp
@@ -2430,7 +2430,7 @@ void CodeGenModule::EmitDeferred() {
   // needed for further handling.
   if (getLangOpts().CUDA && getLangOpts().CUDAIsDevice)
     for (const auto *V : getContext().CUDADeviceVarODRUsedByHost)
-      DeferredDeclsToEmit.push_back(V);
+      addDeferredDeclToEmit(/*GV=*/nullptr, V, "");
 
   // Stop if we're out of both deferred vtables and deferred declarations.
   if (DeferredDeclsToEmit.empty())
@@ -2438,10 +2438,11 @@ void CodeGenModule::EmitDeferred() {
 
   // Grab the list of decls to emit. If EmitGlobalDefinition schedules more
   // work, it will not interfere with this.
-  std::vector<GlobalDecl> CurDeclsToEmit;
+  std::vector<DeferredGlobal> CurDeclsToEmit;
   CurDeclsToEmit.swap(DeferredDeclsToEmit);
 
-  for (GlobalDecl &D : CurDeclsToEmit) {
+  for (DeferredGlobal &DG : CurDeclsToEmit) {
+    GlobalDecl &D = DG.GD;
     // We should call GetAddrOfGlobal with IsForDefinition set to true in order
     // to get GlobalValue with exactly the type we need, not something that
     // might had been created for another decl with the same mangled name but
@@ -3011,15 +3012,13 @@ void CodeGenModule::EmitGlobal(GlobalDecl GD) {
   }
 
   StringRef MangledName = getMangledName(GD);
-  if (GetGlobalValue(MangledName) != nullptr) {
+  if (auto *GV = GetGlobalValue(MangledName)) {
     // The value has already been used and should therefore be emitted.
-    addDeferredDeclToEmit(GV, GD);
-    EmittedDeferredDecls[MangledName] = GD;
+    addDeferredDeclToEmit(GV, GD, MangledName);
   } else if (MustBeEmitted(Global)) {
     // The value must be emitted, but cannot be emitted eagerly.
     assert(!MayBeEmittedEagerly(Global));
-    addDeferredDeclToEmit(/*GV=*/nullptr, GD);
-    EmittedDeferredDecls[MangledName] = GD;
+    addDeferredDeclToEmit(/*GV=*/nullptr, GD, MangledName);
   } else {
     // Otherwise, remember that we saw a deferred decl with this name.  The
     // first use of the mangled name will cause it to move into
@@ -3646,7 +3645,7 @@ llvm::Constant *CodeGenModule::GetOrCreateLLVMFunction(
     if (D && isa<CXXDestructorDecl>(D) &&
         getCXXABI().useThunkForDtorVariant(cast<CXXDestructorDecl>(D),
                                            GD.getDtorType()))
-      addDeferredDeclToEmit(GD);
+      addDeferredDeclToEmit(F, GD, MangledName);
 
     // This is the first use or definition of a mangled name.  If there is a
     // deferred decl with this name, remember that we need to emit it at the end
@@ -3656,8 +3655,7 @@ llvm::Constant *CodeGenModule::GetOrCreateLLVMFunction(
       // Move the potentially referenced deferred decl to the
       // DeferredDeclsToEmit list, and remove it from DeferredDecls (since we
       // don't need it anymore).
-      addDeferredDeclToEmit(F, DDI->second);
-      EmittedDeferredDecls[DDI->first] = DDI->second;
+      addDeferredDeclToEmit(F, DDI->second, MangledName);
       DeferredDecls.erase(DDI);
 
       // Otherwise, there are cases we have to worry about where we're
@@ -3677,7 +3675,7 @@ llvm::Constant *CodeGenModule::GetOrCreateLLVMFunction(
            FD = FD->getPreviousDecl()) {
         if (isa<CXXRecordDecl>(FD->getLexicalDeclContext())) {
           if (FD->doesThisDeclarationHaveABody()) {
-            addDeferredDeclToEmit(GD.getWithDecl(FD));
+            addDeferredDeclToEmit(F, GD.getWithDecl(FD), MangledName);
             break;
           }
         }
@@ -3930,8 +3928,7 @@ CodeGenModule::GetOrCreateLLVMGlobal(StringRef MangledName, llvm::Type *Ty,
   if (DDI != DeferredDecls.end()) {
     // Move the potentially referenced deferred decl to the DeferredDeclsToEmit
     // list, and remove it from DeferredDecls (since we don't need it anymore).
-    addDeferredDeclToEmit(GV, DDI->second);
-    EmittedDeferredDecls[DDI->first] = DDI->second;
+    addDeferredDeclToEmit(GV, DDI->second, MangledName);
     DeferredDecls.erase(DDI);
   }
 
diff --git a/clang/lib/CodeGen/CodeGenModule.h b/clang/lib/CodeGen/CodeGenModule.h
index 3d2e7c51fdbc..88a8197e6af1 100644
--- a/clang/lib/CodeGen/CodeGenModule.h
+++ b/clang/lib/CodeGen/CodeGenModule.h
@@ -352,9 +352,22 @@ private:
 
   /// This is a list of deferred decls which we have seen that *are* actually
   /// referenced. These get code generated when the module is done.
-  std::vector<GlobalDecl> DeferredDeclsToEmit;
-  void addDeferredDeclToEmit(GlobalDecl GD) {
-    DeferredDeclsToEmit.emplace_back(GD);
+  struct DeferredGlobal {
+    DeferredGlobal(llvm::GlobalValue *GV, GlobalDecl GD) : GV(GV), GD(GD) {}
+    llvm::TrackingVH<llvm::GlobalValue> GV;
+    GlobalDecl GD;
+  };
+  std::vector<DeferredGlobal> DeferredDeclsToEmit;
+  void addDeferredDeclToEmit(llvm::GlobalValue *GV, GlobalDecl GD,
+                             StringRef MangledName) {
+    if (const ValueDecl* VD = dyn_cast<ValueDecl>(GD.getDecl())) {
+      if (VD->isWeak()) {
+        if (MangledName.empty())
+          MangledName = getMangledName(GD);
+        EmittedDeferredDecls[MangledName] = GD;
+      }
+    }
+    DeferredDeclsToEmit.emplace_back(GV, GD);
   }
 
   /// Decls that were DeferredDecls and have now been emitted.
-- 
2.34.1

